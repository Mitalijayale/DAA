ITS ME ALL THE BEST : .......................N queen

#include <iostream>
                      using namespace std;

class nqueen
{
public:
    bool check(int **arr, int row, int col, int n);
    bool solve_nqueen(int **arr, int col, int n);
};

bool nqueen::check(int **arr, int row, int col, int n)
{
    int i, j;

    // Check row on the left side
    for (i = 0; i < col; i++)
    {
        if (arr[row][i])
        {
            return false;
        }
    }

    // Check upper diagonal on the left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
    {
        if (arr[i][j])
        {
            return false;
        }
    }

    // Check lower diagonal on the left side
    for (i = row, j = col; j >= 0 && i < n; i++, j--)
    {
        if (arr[i][j])
        {
            return false;
        }
    }

    cout << "Placed queen q" << col + 1 << " at row " << row + 1 << "\n";
    return true;
}

bool nqueen::solve_nqueen(int **arr, int col, int n)
{
    // To check if all queens are placed
    if (col >= n)
    {
        cout << "----------------------------------------------------------------\n";
        cout << "ALL QUEENS ARE PLACED\n ";
        cout << "----------------------------------------------------------------\n";

        return true;
    }

    for (int i = 0; i < n; i++)
    {
        if (check(arr, i, col, n))
        {
            arr[i][col] = 1;

            // Displaying placed queens
            cout << "----------------------------------------------------------------\n";

            for (int k = 0; k < n; k++)
            {
                for (int l = 0; l < n; l++)
                {
                    if (arr[k][l] == 1)
                    {
                        cout << "q" << l + 1 << "\t";
                    }
                    else
                    {
                        cout << "0\t";
                    }
                }
                cout << "\n";
            }
            cout << "----------------------------------------------------------------\n";

            // Iterate to the next column
            if (solve_nqueen(arr, col + 1, n))
            {
                return true;
            }

            cout << "----------------------------------------------------------------\n";
            cout << "Backtrack queen q" << col + 1 << "\n";
            cout << "----------------------------------------------------------------\n";
            arr[i][col] = 0; // Backtrack
        }
    }

    return false;
}

int main()
{
    nqueen q1;
rep:
    int n;
    cout << "Enter the chessboard size (size should be greater than 3):\n";
    cin >> n;
    cout << "----------------------------------------------------------------\n";

    if (n <= 3)
    {
        cout << "Please enter a size greater than 3:\n";
        cout << "----------------------------------------------------------------\n";
        goto rep;
    }

    int **arr = new int *[n];

    cout << "Initially the board is:\n";
    // Initially setting value to 0
    for (int i = 0; i < n; i++)
    {
        arr[i] = new int[n];
        for (int j = 0; j < n; j++)
        {
            arr[i][j] = 0;
            cout << "0\t";
        }
        cout << "\n";
    }

    cout << "----------------------------------------------------------------\n";
    // Solve the problem
    q1.solve_nqueen(arr, 0, n);
    cout << "----------------------------------------------------------------\n";

    cout << "AFTER PLACING THE QUEEN: \n";
    for (int i = 0; i < n; i++)
    {
        for (int k = 0; k < n; k++)
        {
            if (arr[i][k] == 1)
            {
                cout << "q" << k + 1 << "\t";
            }
            else
            {
                cout << "0\t";
            }
        }
        cout << "\n";
    }

    cout << "----------------------------------------------------------------\n";
    return 0;
}

== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == =

                                                                                                                                                 Belmon Ford

#include <iostream>
#include <vector>
#include <climits>
#include <chrono>
    using namespace std;

const int INF = INT_MAX;

struct Edge
{
    int src, dest, weight;
};

class BellmanFord
{
public:
    BellmanFord(int vertices);
    void addEdge(int src, int dest, int weight);
    void findShortestPath(int startVertex);

private:
    int V;
    vector<int> distance;
    vector<int> predecessor;
    vector<Edge> edges;

    void initialize(int startVertex);
    bool relaxEdge(Edge edge);

    void printPath(int vertex);
};

BellmanFord::BellmanFord(int vertices)
{
    V = vertices;
    distance.resize(V, INF);
    predecessor.resize(V, -1);
}

void BellmanFord::addEdge(int src, int dest, int weight)
{
    Edge edge = {src, dest, weight};
    edges.push_back(edge);
}

void BellmanFord::initialize(int startVertex)
{
    distance[startVertex] = 0;
}

bool BellmanFord::relaxEdge(Edge edge)
{
    if (distance[edge.src] != INF && distance[edge.src] + edge.weight < distance[edge.dest])
    {
        distance[edge.dest] = distance[edge.src] + edge.weight;
        predecessor[edge.dest] = edge.src;
        return true;
    }
    return false;
}

void BellmanFord::findShortestPath(int startVertex)
{
    initialize(startVertex);

    for (int i = 1; i < V; i++)
    {
        for (Edge edge : edges)
        {
            relaxEdge(edge);
        }
    }

    for (Edge edge : edges)
    {
        if (relaxEdge(edge))
        {
            cout << "Negative-weight cycle detected. Bellman-Ford algorithm cannot guarantee shortest paths." << endl;
            return;
        }
    }

    cout << "Vertex\tDistance\tPath" << endl;
    for (int i = 0; i < V; i++)
    {
        cout << i << "\t" << distance[i] << "\t\t";
        printPath(i);
        cout << endl;
    }
}

void BellmanFord::printPath(int vertex)
{
    if (distance[vertex] == 0)
    {
        cout << vertex;
        return;
    }
    if (predecessor[vertex] == -1)
    {
        cout << "No path exists";
        return;
    }
    printPath(predecessor[vertex]);
    cout << " -> " << vertex;
}

int main()
{
    int vertices, edges;
    cout << "Enter the number of vertices: ";
    cin >> vertices;
    cout << "Enter the number of edges: ";
    cin >> edges;

    BellmanFord graph(vertices);

    for (int i = 0; i < edges; i++)
    {
        int src, dest, weight;
        cout << "Enter edge " << i + 1 << " (source destination weight): ";
        cin >> src >> dest >> weight;
        graph.addEdge(src, dest, weight);
    }

    int startVertex;
    cout << "Enter the starting vertex: ";
    cin >> startVertex;

    auto start_time = chrono::high_resolution_clock::now();
    graph.findShortestPath(startVertex);
    auto end_time = chrono::high_resolution_clock::now();
    chrono::duration<double> elapsed = end_time - start_time;

    cout << "Execution time: " << elapsed.count() << " seconds" << endl;

    return 0;
}

/*
Enter the number of vertices: 5 8
Enter the number of edges: Enter edge 1 (source destination weight): 0 1 6
Enter edge 2 (source destination weight): 0 2 7
Enter edge 3 (source destination weight): 1 2 8
Enter edge 4 (source destination weight): 1 3 -4
Enter edge 5 (source destination weight): 1 4 5
Enter edge 6 (source destination weight): 2 3 9
Enter edge 7 (source destination weight): 2 4 -3
Enter edge 8 (source destination weight): 3 4 7
Enter the starting vertex: 0
Vertex  Distance        Path
0       0               0
1       6               0 -> 1
2       7               0 -> 2
3       2               0 -> 1 -> 3
4       4               0 -> 2 -> 4
Execution time: 0.007381 seconds
*/

== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==

    SUM OF SUBSET

#include <iostream>
#include <vector>
    using namespace std;

vector<int> path;
vector<int> subset;

void findSubsets(int arr[], int sum, int n, int k, int targetSum)
{
    if (sum == targetSum)
    {
        cout << "Subset: ";
        for (int i = 0; i < path.size(); i++)
        {
            cout << path[i] << " ";
        }
        cout << "=> Sum: " << targetSum << endl;
    }

    for (int i = k; i < n; i++)
    {
        if (sum + arr[i] <= targetSum)
        {
            path.push_back(arr[i]);
            findSubsets(arr, sum + arr[i], n, i + 1, targetSum);
            path.pop_back();
        }
    }
}

int main()
{
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    int targetSum;
    cout << "Enter the target sum: ";
    cin >> targetSum;

    cout << "Subsets with a sum of " << targetSum << ":" << endl;
    findSubsets(arr, 0, n, 0, targetSum);

    return 0;
}

== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==

    TSP

#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
    using namespace std;

const int INF = INT_MAX;

int n;
vector<vector<int>> graph;

vector<int> path;
vector<int> minPath;
int minCost = INF;

void tspBranchAndBound(int level, int cost, int mask)
{
    if (level == n)
    {
        if (graph[path[level - 1]][0] != 0 && cost + graph[path[level - 1]][0] < minCost)
        {
            minCost = cost + graph[path[level - 1]][0];
            minPath = path;
        }
        return;
    }

    for (int city = 1; city < n; city++)
    {
        if ((mask & (1 << city)) == 0 && graph[path[level - 1]][city] != 0)
        {
            path[level] = city;
            tspBranchAndBound(level + 1, cost + graph[path[level - 1]][city], mask | (1 << city));
            path[level] = -1;
        }
    }
}

int main()
{
    cout << "Enter the number of cities: ";
    cin >> n;

    graph.resize(n, vector<int>(n));
    path.resize(n);

    cout << "Enter the adjacency matrix for the graph:" << endl;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> graph[i][j];
        }
    }

    for (int i = 0; i < n; i++)
    {
        path[i] = -1;
    }
    path[0] = 0;

    tspBranchAndBound(1, 0, 1);

    cout << "Optimal TSP Tour: ";
    for (int city : minPath)
    {
        cout << city << " -> ";
    }
    cout << "0" << endl;

    cout << "Minimum Cost: " << minCost << endl;

    return 0;
}

/*
Enter the number of cities: 4
Enter the adjacency matrix for the graph:
0 10 15 20
10 0 35 25
15 35 0 30
20 25 30 0
Optimal TSP Tour: 0 -> 1 -> 3 -> 2 -> 0
Minimum Cost: 80
*/

01

#include <bits/stdc++.h>
    using namespace std;

int knapSackRec(int W, int wt[], int val[], int index, int **dp)
{
    if (index < 0)
        return 0;
    if (dp[index][W] != -1)
        return dp[index][W];

    if (wt[index] > W)
    {

        // Store the value of function call
        // stack in table before return
        dp[index][W] = knapSackRec(W, wt, val, index - 1, dp);
        return dp[index][W];
    }
    else
    {
        // Store value in a table before return
        dp[index][W] = max(val[index] + knapSackRec(W - wt[index], wt, val,
                                                    index - 1, dp),
                           knapSackRec(W, wt, val, index - 1, dp));

        // Return value of table after storing
        return dp[index][W];
    }
}

int knapSack(int W, int wt[], int val[], int n)
{
    // double pointer to declare the
    // table dynamically
    int **dp;
    dp = new int *[n];

    // loop to create the table dynamically
    for (int i = 0; i < n; i++)
        dp[i] = new int[W + 1];

    // loop to initially filled the
    // table with -1
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < W + 1; j++)
        {
            dp[i][j] = -1;
        }
    }
    return knapSackRec(W, wt, val, n - 1, dp);
}

// Driver Code
int main()
{
    /*
    int profit[] = { 60, 100, 120 };
    int weight[] = { 10, 20, 30 };
    int W = 50;
    */

    int o;
    cout << "enter number of items : ";
    cin >> o;
    int profit[o];
    int weight[o];

    for (int i = 0; i < o; i++)
    {
        cout << "enter profit : ";

        cin >> profit[i];
    }
    for (int i = 0; i < o; i++)
    {
        cout << "enter weight : ";
        cin >> weight[i];
    }
    int W;
    cout << "Enter max weight of bag :";
    cin >> W;

    int n = sizeof(profit) / sizeof(profit[0]);
    int maxProfit = knapSack(W, weight, profit, n);

    // Display the input details in a table format
    cout << "Item\tWeight\tProfit\tRatio" << endl;
    for (int i = 0; i < n; i++)
    {
        double ratio = static_cast<double>(profit[i]) / weight[i];
        cout << i + 1 << "\t" << weight[i] << "\t" << profit[i] << "\t" << fixed << setprecision(2) << ratio << endl;
    }

    cout << "Maximum Profit: " << maxProfit << endl;

    return 0;
}

fractnol

#include <iostream>
#include <vector>
#include <algorithm>

    using namespace std;

struct Item
{
    int weight;
    int value;
    double ratio; // Value-to-weight ratio
};

// Function to compare items based on their ratio (for sorting)
bool compareItems(const Item &a, const Item &b)
{
    return a.ratio > b.ratio;
}

int main()
{
    int n; // Number of items
    cout << "Enter the number of items: ";
    cin >> n;

    vector<Item> items(n);

    // Input item weights and values
    for (int i = 0; i < n; ++i)
    {
        cout << "Enter the weight of item " << i + 1 << ": ";
        cin >> items[i].weight;
        cout << "Enter the value of item " << i + 1 << ": ";
        cin >> items[i].value;
        items[i].ratio = static_cast<double>(items[i].value) / items[i].weight;
    }

    // Sort items based on value-to-weight ratio in non-increasing order
    sort(items.begin(), items.end(), compareItems);

    int capacity; // Knapsack capacity
    cout << "Enter the capacity of the knapsack: ";
    cin >> capacity;

    double maxProfit = 0.0;
    vector<double> selected(n, 0.0); // Fraction of each item selected

    // Fill the knapsack with items in greedy fashion
    for (int i = 0; i < n; ++i)
    {
        if (capacity == 0)
            break;

        if (items[i].weight <= capacity)
        {
            selected[i] = 1.0; // Take the whole item
            maxProfit += items[i].value;
            capacity -= items[i].weight;
        }
        else
        {
            selected[i] = static_cast<double>(capacity) / items[i].weight;
            maxProfit += selected[i] * items[i].value;
            capacity = 0;
        }
    }

    // Display the results in table format
    cout << "\nItem\tWeight\tValue\tRatio\tSelected Fraction\n";
    for (int i = 0; i < n; ++i)
    {
        cout << i + 1 << "\t" << items[i].weight << "\t" << items[i].value << "\t";
        cout << items[i].ratio << "\t" << selected[i] << "\n";
    }

    cout << "\nMaximum Profit: " << maxProfit << endl;

    return 0;
}
